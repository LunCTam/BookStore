@page "/authors/view/{Id}"

@inject IAuthorRepository _authorRepository
@inject NavigationManager  _navManager

<h3 class="card-title">View Single Author</h3>

@if (Model == null)
{
    <LoadMessage Message="Please wait..." />
}
else
{
    <div class="col-md-4">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@Model.Firstname</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.Lastname</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@Model.Bio</td>
            </tr>
        </table>
        <br />
        @if (Model.Books == null || Model.Books.Count == 0)
        {
            <div class="alert alert-dismissible alert-secondary">
                No Books for this Author 
            </div>
        }
        else
        {
            <div class="card" style="width: 20rem;">
                <div class="card-header">
                    <h4>Author's Books</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var book in Model.Books)
                    {
                        <li class="list-group-item">@book.Title - @book.Price</li>
                    }
                </ul>
            </div>
        }
    </div>
    <br />
    <button @onclick="BacktoList" class="btn btn-outline-secondary">
        <span class="oi oi-media-step-backward"></span>
        Back to List
    </button>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    protected async override Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _authorRepository.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BacktoList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
