@page "/Books/create/"
@attribute [Authorize(Roles = "admin")]

@inject IBookRepository _bookRepository
@inject IAuthorRepository _authorRepository
@inject IFileUpload _fileUpload 
@inject NavigationManager  _navManager

@using System.IO

<h3 class="card-title">Create New Book</h3>

@if (!isSuccess)
{
    <LoadMessage Message="Something went wrong with the Book create ..." />
}
<EditForm Model="Model" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText @bind-Value="Model.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="Model.ISBN" class="form-control" id="isbn" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
    </div>
    <div class="form-group">
        <label for="author">Authors</label>
        <select @bind="Model.AuthorId" class="form-control" id="author">
            <option value="">-- Select Author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.Firstname @author.Lastname</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
    </div>
    <div class="form-group">
        <label for="bookcover">Book Cover Photo</label>
        <InputFile OnChange="HandleFileSelection" />

        @if (!isInvalidFileType)
        {
            <LoadMessage Message="Please remove the invalid file type..." />
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px; width:100px" />
        }
    </div>
    <br />
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Submit Create
    </button>
    <button @onclick="BacktoList" class="btn btn-outline-secondary">
        <span class="oi oi-media-step-backward"></span>
        Back to List
    </button>
</EditForm>

@code {
    private Book Model = new Book();
    private IList<Author> Authors;
    private IFileListEntry file;
    private MemoryStream msFile;
    private string imageDataURL;
    private bool isInvalidFileType = false;
    private bool isSuccess = true;

    protected async override Task OnInitializedAsync()
    {
        Authors = await _authorRepository.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task HandleCreate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _fileUpload.UploadFile(file, msFile, picName);
                Model.Image = picName;

                isSuccess = await _bookRepository.Create(Endpoints.BooksEndpoint, Model);
                if (isSuccess)
                {
                    BacktoList();
                }
            }
        }
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("jpeg") || name.Contains("png"))
            {
                msFile = new MemoryStream();
                await file.Data.CopyToAsync(msFile);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                imageDataURL = String.Empty;
                isInvalidFileType = true;
            }
        }
        else
        {
            imageDataURL = String.Empty;
            isInvalidFileType = false;
        }
    }

    private void BacktoList()
    {
        _navManager.NavigateTo("/Books/");
    }
}

